def skip_lines(a):
    for x in range(a):
        print ""
def print_board(board):
    a = "  "
    spacer = ""
    if len(board) >= 9:
      a += " "
    for x in range(len(board[0])):
      a += str(x + 1)
      a += " "
    print a
    
    for b in range(len(board)):
      if b >= 9 or len(board) < 9:
        spacer = ""
      else:
        spacer = " "
      print "| "+ spacer + " ".join(board[b]) + " |"
    
    # bottom border
    c = "|-"
    for d in range(len(board[0])):
      c += "--"
    c += "|"
    print c
def check(board):
    for row in board: # check for horizonal connect 4
      o_counter = 0
      x_counter = 0
      for a in row:
        if a == "O":
          o_counter += 1
          x_counter = 0
        elif a == "X":
          x_counter += 1
          o_counter = 0
        else:
          o_counter = 0
          x_counter = 0
        if o_counter == 4 or x_counter == 4:
          return True
    for column in range(len(board[0])): # check for vertical connect 4
      o_counter = 0
      x_counter = 0
      for a in range(len(board)):
        if board[a][column] == "O":
          o_counter += 1
          x_counter = 0
        elif board[a][column] == "X":
          x_counter += 1
          o_counter = 0
        else:
          o_counter = 0
          x_counter = 0
        if o_counter == 4 or x_counter == 4:
          return True
    #needs to include diagonal check
    #upwards diagonal uses addition
    #downwards diagonal uses subtraction
    
    #check for diagonal
    
    #check for upwards to right
    for sum in range(3,len(board[0]) + len(board) - 3): #for all possible sums of diagonal coordinates (3 to 4 from length of row)
      x_counter = 0
      o_counter = 0
      for row in range(len(board)):
        for column in range(len(board[0])):
          if row + column == sum:
            if board[row][column] == "X":
              x_counter += 1
              o_counter = 0
            elif board[row][column] == "O":
              x_counter = 0
              o_counter += 1
            else:
              x_counter = 0
              o_counter = 0
            
            if x_counter == 4 or o_counter == 4:
              return True
              
    #check for downwards to right
    for sum in range(-len(board) + 4 ,len(board[0])- 4): 
      x_counter = 0
      o_counter = 0
      for row in range(len(board)):
        for column in range(len(board[0])):
          if row - column == sum:
            if board[row][column] == "X":
              x_counter += 1
              o_counter = 0
            elif board[row][column] == "O":
              x_counter = 0
              o_counter += 1
            else:
              x_counter = 0
              o_counter = 0
            
            if x_counter == 4 or o_counter == 4:
              return True
              
    return False
    
    
def valid_column(column_input):
  if len(column_input) == 0:
    return False
  elif column_input not in valid_column_inputs:
    return False
  else:
    return True
def print_new_game():
  print "CONNNECT FOUR"
  print "NEW GAME"
  print "------------------------------"
  skip_lines(1)
def reset_board(board):
  for row in range(len(board)):
    for column in range(len(board[0])):
      board[row][column] = "-"

game_score = [0,0]

# create board
num_board_rows = 6
num_board_columns = 7
board = []
for a in range(num_board_rows):
  row = []
  for b in range(num_board_columns):
    row.append("-")
  board.append(row)

num_board_spaces = 0
for x in range(len(board)):
  num_board_spaces += len(board[x])

# create valid column inputs
valid_column_inputs = []
for x in range(len(board[0])):
  valid_column_inputs += str(x + 1)

# start game
print_new_game()

name_setup_check = True
while(name_setup_check):
  response_check = True
  while(response_check):
    player_one = raw_input("Player 1: ")
    if len(player_one) != 0:
      response_check = False
    else:
      print "Please enter a name"
      skip_lines(1)
      
  response_check = True
  while(response_check):
    player_two = raw_input("Player 2: ")
    if len(player_two) != 0:
      response_check = False
    else:
      print "Please enter a name"
      skip_lines(1)
      
  if player_one == player_two:
    print "Please pick different names!"
    skip_lines(2)
  else:
    name_setup_check = False

skip_lines(1)
print_board(board)
skip_lines(1)

play_game = True
while(play_game):
  turn = player_one
  symbol = "X"
  winner = False
  while(not winner):
    print turn + ", it's your turn!"
    valid_turn = False
    while(not valid_turn):
      column_input = raw_input("Column: ")
      if not valid_column(column_input):
        print "Please input a valid column number"
      elif board[0][int(column_input) - 1] != "-":
        print "That column is already full!"
      else:
        play = int(column_input)
        for x in range(len(board)):
          if str(board[len(board)-1 - x][play - 1]) == "-":
            play = column_input
            valid_turn = True
            break
    
    skip_lines(3)
    board[len(board)-1 - x][int(play) - 1] = symbol
    print_board(board)
    
    if check(board):
      winner = True
      if turn == player_one:
        game_score[0] += 1
      else:
        game_score[1] += 1
    else:
      if symbol == "X":
        symbol = "O"
      elif symbol == "O":
        symbol = "X"
      if turn == player_one:
        turn = player_two
      elif turn == player_two:
        turn = player_one
      skip_lines(3) 
  
  skip_lines(2)
  print "---- Game Score ----"
  print player_one + ": " + str(game_score[0])
  print player_two + ": " + str(game_score[1])
  skip_lines(2)
  
  print "Congratulations " + turn + "!"
  print "You've made 4 in a row!"
  
  valid_input = True
  valid_play_again_responses = ["Y","N","y","n"]
  while(valid_input):
    skip_lines(1)
    g = raw_input("Would you like to play again? (y/n): ")
    if g not in valid_play_again_responses:
      print "Please input y or n."
    else:
      valid_input = False
      
  if g.lower() == "n":
    play_game = False
  elif g.lower() == "y":
    skip_lines(2)
    print_new_game()
    reset_board(board)
    print_board(board)
    skip_lines(2)
